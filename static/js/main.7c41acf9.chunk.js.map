{"version":3,"sources":["redux/slices/items.js","redux/slices/filter.js","redux/store.js","components/Container/Container.styled.jsx","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["itemsSlice","createSlice","name","initialState","JSON","parse","localStorage","getItem","reducers","addContact","state","action","payload","deleteContact","filter","contact","id","actions","filterSlice","rootReducer","items","store","configureStore","reducer","devTools","process","Container","styled","div","Title","h1","SectionTitle","h2","CustomForm","form","CustomButton","button","Button","text","type","onClick","CurrentInput","input","CurrentLabel","label","Input","value","pattern","title","onChange","Form","useState","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","handleSetInfo","e","target","reset","onSubmit","preventDefault","uuidv4","find","savedContact","alert","required","ContactItem","li","ContactListItem","ContactList","filterValue","useEffect","setItem","stringify","filteredContacts","toLowerCase","includes","map","Filter","App","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c41acf9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst itemsSlice=createSlice({\r\n  name: 'items',\r\n  initialState: JSON.parse(localStorage.getItem('contactList')) ?? [],\r\n  reducers: {\r\n     addContact:  (state,action)=>[action.payload,...state],\r\n     deleteContact: (state, action)=> state.filter((contact) => contact.id !== action.payload),\r\n  }\r\n});\r\n\r\nexport const {addContact, deleteContact} = itemsSlice.actions;\r\nexport default itemsSlice.reducer;","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst filterSlice=createSlice({\r\n  name: 'filter',\r\n  initialState: '',\r\n  reducers: {\r\n      filter: (state, action)=> action.payload,\r\n  },\r\n});\r\n\r\nexport const {filter} = filterSlice.actions;\r\nexport default filterSlice.reducer;","//Без Redux-toolkit\r\n// import { createStore} from 'redux';\r\n// import { rootReduser } from './reducers/index'\r\n// import { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n// const store = createStore(rootReduser, devToolsEnhancer());\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit\r\n// import {configureStore } from '@reduxjs/toolkit';\r\n// import { rootReduser } from './reducers/index';\r\n\r\n// const store = configureStore({\r\n//     reducer: rootReducer,\r\n//     devTools: process.env.NODE_ENV!== 'prodaction',\r\n// });\r\n\r\n// export default store;\r\n\r\n\r\n// c Redux-toolkit i Slice\r\nimport {configureStore } from '@reduxjs/toolkit';\r\nimport items from './slices/items.js';\r\nimport filter from './slices/filter.js';\r\n\r\nconst rootReducer = {\r\n    items,\r\n    filter,\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: process.env.NODE_ENV!== 'prodaction',\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n \r\n\r\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 400px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  padding: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 30px;\n`;\n\nexport const Title = styled.h1`\n  display: block;\n  font-size: 26px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n`;\n\nexport const SectionTitle = styled.h2`\n  display: block;\n  font-size: 20px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomForm = styled.form`\n  padding: 0px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomButton = styled.button`\n  background-color: #ff6b0a;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  padding: 3px 12px;\n  color: #fff;\n  font-weight: bold;\n  font-size: 12px;\n  line-height: 16px;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { CustomButton } from './Button.styled';\n\nfunction Button({ text, type, onClick }) {\n  return (\n    <CustomButton type={type} onClick={onClick}>\n      {text}\n    </CustomButton>\n  );\n}\n\n// Button.propTypes = {\n//   text: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n// }\n\nexport default Button;\n","import styled from '@emotion/styled';\n\nexport const CurrentInput = styled.input`\n  display: block;\n  margin-top: 6px;\n  margin-bottom: 20px;\n`;\n\nexport const CurrentLabel = styled.label`\n  text-transform: capitalize;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { CurrentInput, CurrentLabel } from './Input.styled';\n\nexport default function Input({\n  type,\n  name,\n  value,\n  pattern = null,\n  title = null,\n  onChange,\n}) {\n  return (\n    <CurrentLabel>\n      {name}\n      <CurrentInput\n        type={type}\n        name={name}\n        value={value}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n      />\n    </CurrentLabel>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CustomForm } from './Form.styled';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from '../../redux/actions/items'; //без Toolkit i Slice\nimport {addContact} from '../../redux/slices/items.js';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.items);\n  \n  const handleSetInfo = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n    const id = uuidv4();\n    \n    contacts.find(savedContact => savedContact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number, id }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <CustomForm onSubmit={handleAddContact}>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Button type=\"submit\" text=\"Add contact\" />\n    </CustomForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\n\n","import PropTypes from 'prop-types';\nimport { ContactItem} from './ContactListItem.styled';\nimport Button from '../Button/Button';\n// import { deleteContact } from '../../redux/actions/items'; //без Toolkit i Slice\n\n\nexport default function ContactListItem({ name, number, onClick}) {\n  return (\n    <ContactItem>\n      {name} : {number}\n      <Button type=\"button\" text=\"delete\" onClick={onClick} />\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n}","import { useSelector,  useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { deleteContact } from '../../redux/slices/items'; //c Slice\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nexport default function ContactList() {\n  const contacts = useSelector((state) => state.items);\n  const filterValue = useSelector((state) => state.filter);\n  // console.log(`filter`, filterValue)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    localStorage.setItem('contactList', JSON.stringify(contacts));\n  }, [contacts]);\n\n  \n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue),\n  );\n  \n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onClick={()=>dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n}\n\n","import { useDispatch} from 'react-redux';\r\nimport Input from '../Input/Input';\r\nimport { filter } from '../../redux/slices/filter';\r\n\r\nexport default function Filter() {\r\n    const dispatch = useDispatch();\r\n     \r\n    const changeFilter = e => {\r\n      dispatch(filter(e.target.value.toLowerCase()));\r\n    };\r\n  \r\n     \r\n    return (\r\n      <Input\r\n        name=\"Find contacts by name\"\r\n        type=\"text\"\r\n        onChange={changeFilter}\r\n      />\r\n )\r\n }","// import { v4 as uuidv4 } from 'uuid';\nimport { useSelector } from 'react-redux';\nimport {\n  Container,\n  Title,\n  SectionTitle,\n} from './components/Container/Container.styled.jsx';\nimport Form from './components/Form/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\n\n\nexport default function App() {\n  const contacts = useSelector((state) => state.items);\n \n   // const formSubmitHandle = ({ name, number }) => {\n  //   const contact = { name, number, id: uuidv4() };\n  //   contacts.find(savedContact => savedContact.name === name)\n  //     ? alert(`${name} is already in contacts`)\n  //     : setContacts(prevContacts => [...prevContacts, contact]);\n  // };\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <Form/>\n      {contacts.length !== 0 && <SectionTitle>Contacts</SectionTitle>}\n      {contacts.length !== 0 && <Filter/>}\n      <ContactList/>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}